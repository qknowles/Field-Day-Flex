import React, { useState, useEffect } from 'react';
import WindowWrapper from '../wrappers/WindowWrapper';
import InputLabel from '../components/InputLabel';
import { Type, notify } from '../components/Notifier';
import { getProjectNames } from '../utils/firestore';
import Button from '../components/Button';

export default function Membership({ CancelMembership, Email }) {
    const [projects, setProjects] = useState([]);
    const [projectToLeave, setProjectToLeave] = useState(null);

    useEffect(() => {
        const loadProjects = async () => {
            try {
                const projectList = await getProjectNames(Email);
                setProjects(projectList);
            } catch (error) {
                notify(Type.error, 'Failed to load projects');
                console.error('Error loading projects:', error);
            }
        };
        loadProjects();
    }, [Email]);

    const handleLeaveProject = async () => {
        if (!projectToLeave) return;

        try {
            // Firebase leave project logic would go here
            notify(Type.success, `Left project: ${projectToLeave}`);
            setProjects(projects.filter(p => p !== projectToLeave));
            setProjectToLeave(null);
        } catch (error) {
            notify(Type.error, 'Failed to leave project');
            console.error('Error leaving project:', error);
        }
    };

    return (
        <WindowWrapper
            header="Manage Memberships"
            onLeftButton={CancelMemberships}
            onRightButton={projectToLeave ? handleLeaveProject : null}
            leftButtonText="Cancel"
            rightButtonText={projectToLeave ? "Confirm Leave" : null}
        >
            <div className="flex flex-col space-y-4">
                {projects.length === 0 ? (
                    <div className="text-center p-4 text-gray-500">
                        You are not a member of any projects
                    </div>
                ) : (
                    projects.map((project) => (
                        <div 
                            key={project}
                            className="flex items-center justify-between p-4 bg-white dark:bg-neutral-800 rounded-lg border border-gray-200 dark:border-neutral-700"
                        >
                            <span className="text-lg">{project}</span>
                            <Button
                                text="Leave Project"
                                onClick={() => setProjectToLeave(project)}
                                className="bg-asu-maroon hover:bg-opacity-90"
                                disabled={projectToLeave === project}
                            />
                        </div>
                    ))
                )}

                {projectToLeave && (
                    <div className="p-4 bg-red-100 dark:bg-red-900 rounded-lg">
                        <p className="text-center">
                            Are you sure you want to leave project: {projectToLeave}?
                            This action cannot be undone.
                        </p>
                    </div>
                )}
            </div>
        </WindowWrapper>
    );
}